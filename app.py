from PySide6.QtWidgets import (QApplication, QMainWindow, QStackedWidget, QWidget,
                               QVBoxLayout, QPushButton, QLineEdit, QLabel, QFileDialog,
                               QTextEdit, QSplitter, QHBoxLayout)
from PySide6.QtWebEngineWidgets import QWebEngineView
from PySide6.QtCore import Qt, QUrl
import sys
import subprocess
import os
from main import run

class RepoInputWidget(QWidget):
    def __init__(self, load_callback):
        super().__init__()
        self.load_callback = load_callback
        layout = QVBoxLayout()

        self.repo_input = QLineEdit()
        self.repo_input.setPlaceholderText("Enter GitHub URL or Local Folder Path")

        self.browse_button = QPushButton("Browse Local Folder")
        self.load_button = QPushButton("Load Repository")

        layout.addWidget(QLabel("Load Code Repository"))
        layout.addWidget(self.repo_input)
        layout.addWidget(self.browse_button)
        layout.addWidget(self.load_button)
        self.setLayout(layout)

        self.browse_button.clicked.connect(self.browse_folder)
        self.load_button.clicked.connect(self.load_repository)

    def browse_folder(self):
        folder = QFileDialog.getExistingDirectory(self, "Select Folder")
        if folder:
            self.repo_input.setText(folder)

    def load_repository(self):
        repo_path = self.repo_input.text()
        if repo_path:
            self.load_callback(repo_path)

class CodeQueryWidget(QWidget):
    def __init__(self):
        super().__init__()
        splitter = QSplitter(Qt.Horizontal)

        self.web_view = QWebEngineView()
        self.web_view.setHtml("<h1>Repository Graph will appear here</h1>")

        chat_layout = QVBoxLayout()
        self.chat_display = QTextEdit()
        self.chat_display.setReadOnly(True)
        self.chat_input = QLineEdit()
        self.send_button = QPushButton("Send")

        chat_layout.addWidget(QLabel("Codebase Chatbot"))
        chat_layout.addWidget(self.chat_display)

        input_layout = QHBoxLayout()
        input_layout.addWidget(self.chat_input)
        input_layout.addWidget(self.send_button)
        chat_layout.addLayout(input_layout)

        chat_widget = QWidget()
        chat_widget.setLayout(chat_layout)

        splitter.addWidget(self.web_view)
        splitter.addWidget(chat_widget)

        layout = QVBoxLayout()
        layout.addWidget(splitter)
        self.setLayout(layout)

class MainWindow(QMainWindow):
    def __init__(self):
        super().__init__()
        self.setWindowTitle("Codebase Visualizer & Query System")

        self.stack = QStackedWidget()
        self.repo_input_page = RepoInputWidget(self.load_repo)
        self.code_query_page = CodeQueryWidget()

        self.stack.addWidget(self.repo_input_page)
        self.stack.addWidget(self.code_query_page)
        self.setCentralWidget(self.stack)

    def load_repo(self, repo_path):
        
        run(repo_path)
        # Read the output HTML generated by your backend
        output_graph_path = "data/outputs/graph.html"
        if os.path.exists(output_graph_path):
            with open(output_graph_path, "r") as f:
                graph_html = f.read()
            self.code_query_page.web_view.setHtml(graph_html, QUrl(""))
        else:
            print("Graph file not found, showing placeholder.")
            self.code_query_page.web_view.setHtml("<h3>Graph not found</h3>")

        # Switch to code query page after loading
        self.stack.setCurrentWidget(self.code_query_page)

if __name__ == "__main__":
    app = QApplication(sys.argv)
    window = MainWindow()
    window.resize(1200, 700)
    window.show()
    sys.exit(app.exec())
